name: Release
on:
  push:
    tags:
      - '*'

defaults:
  run:
    shell: bash

jobs:
  native:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            rust: stable
            target: x86_64-unknown-linux-gnu
            artifact_name: jira_cli
            asset_name: jira_cli-linux_amd64
          - os: macos-latest
            rust: stable
            target: x86_64-apple-darwin
            artifact_name: jira_cli
            asset_name: jira_cli-darwin_amd64
          - os: windows-latest
            rust: stable-msvc
            target: x86_64-pc-windows-msvc
            artifact_name: jira_cli.exe
            asset_name: jira_cli-windows_msvc_amd64.exe
          - os: windows-latest
            rust: stable-gnu
            target: x86_64-pc-windows-gnu
            artifact_name: jira_cli.exe
            asset_name: jira_cli-windows_gnu_amd64.exe
    steps:
      - uses: Swatinem/rust-cache@v1
        with:
          sharedKey: jira_cli-${{ matrix.target }}
          cache-on-failure: true
      - uses: actions/checkout@v3
      - name: Update Rustup (temporary workaround)
        run: rustup self update
        shell: bash
        if: startsWith(matrix.os, 'windows')
      - run: rustup update --no-self-update ${{ matrix.rust }} && rustup default ${{ matrix.rust }}
        name: Update Rustup and define default toolchain
      - run: rustup target add ${{ matrix.target }}
        name: Add target
      - run: sudo apt update -y && sudo apt install expect gcc-multilib libjemalloc-dev libsecret-1-0 libsecret-1-dev -y
        name: Install dependencies for Linux
        if: matrix.os == 'ubuntu-latest'
      - run: rustup component add rustfmt || echo "rustfmt not available"
        name: Install rustfmt
      - run: cargo build --release --target ${{ matrix.target }}
        name: Build
        env:
          RUSTFLAGS: "-C target-feature=+crt-static"
      - name: Upload binaries to release
        uses: svenstaro/upload-release-action@v1-release
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: target/${{ matrix.target }}/release/${{ matrix.artifact_name }}
          asset_name: ${{ matrix.asset_name }}
          tag: ${{ github.ref_name }}

  cross:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            rust: stable
            target: aarch64-unknown-linux-gnu
            artifact_name: jira_cli
            asset_name: jira_cli-linux_aarch64
          - os: macos-latest
            rust: stable
            target: aarch64-apple-darwin
            artifact_name: jira_cli
            asset_name: jira_cli-darwin_arm
    steps:
      - uses: Swatinem/rust-cache@v1
        with:
          sharedKey: jira_cli-${{ matrix.target }}
          cache-on-failure: true
      - uses: actions/checkout@v3
      - name: Update Rustup (temporary workaround)
        run: rustup self update
        shell: bash
        if: startsWith(matrix.os, 'windows')
      - run: rustup update --no-self-update ${{ matrix.rust }} && rustup default ${{ matrix.rust }}
        name: Update Rustup and define default toolchain
      - run: rustup target add ${{ matrix.target }}
        name: Add target
      - run: sudo apt update -y && sudo apt dist-upgrade -y && sudo apt install expect g++-aarch64-linux-gnu gcc-aarch64-linux-gnu libjemalloc-dev libsecret-1-0 libsecret-1-dev -y
        name: Install dependencies for Linux
        if: matrix.os == 'ubuntu-latest'
      - run: rustup component add rustfmt || echo "rustfmt not available"
        name: Install rustfmt
      - run: cargo build --release --target ${{ matrix.target }}
        name: Build for all architecture except Mac ARM
        env:
          RUSTFLAGS: "-C target-feature=+crt-static"
        if: matrix.target != 'aarch64-apple-darwin'
      - run: |
          SDKROOT=$(xcrun -sdk macosx --show-sdk-path)
          MACOSX_DEPLOYMENT_TARGET=$(xcrun -sdk macosx --show-sdk-platform-version)
          cargo build --release --target ${{ matrix.target }}
        name: Build for Mac ARM
        env:
          RUSTFLAGS: "-C target-feature=+crt-static"
        if: matrix.target == 'aarch64-apple-darwin'
      - name: Upload binaries to release
        uses: svenstaro/upload-release-action@v1-release
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: target/${{ matrix.target }}/release/${{ matrix.artifact_name }}
          asset_name: ${{ matrix.asset_name }}
          tag: ${{ github.ref_name }}

  freebsd-x86-64:
    name: FreeBSD x86-64
    env:
      RUSTFLAGS: "-C target-feature=+crt-static"
    runs-on: macos-12
    steps:
    - uses: actions/checkout@v3
    - name: Cache target
      id: jira_cli-freebsd-x86-64
      uses: actions/cache@v3
      with:
        path: target/
        key: jira_cli-freebsd-x86-64
    - uses: vmactions/freebsd-vm@v0
      with:
        mem: 4096
        usesh: true
        envs: 'RUSTFLAGS'
        prepare: |
          mkdir -p /usr/local/etc/pkg/repos/
          cp /etc/pkg/FreeBSD.conf /usr/local/etc/pkg/repos/
          sed -i '' -e 's/quarterly/latest/g' /usr/local/etc/pkg/repos/FreeBSD.conf
          pkg upgrade -y
          pkg install -y gmake rust
        run: |
          cargo build --release --target x86_64-unknown-freebsd
    - name: Upload binaries to release
      uses: svenstaro/upload-release-action@v1-release
      with:
        repo_token: ${{ secrets.GITHUB_TOKEN }}
        file: target/x86_64-unknown-freebsd/release/jira_cli
        asset_name: jira_cli-freebsd_amd64
        tag: ${{ github.ref_name }}


  sbom:
    runs-on: ubuntu-latest
    name: Generate SBOM
    steps:
      - uses: actions/checkout@v2
      - name: Install stable toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      - uses: Swatinem/rust-cache@v1
        with:
          sharedKey: jira_cli-sbom
          cache-on-failure: true
      - name: Install cargo-cyclonedx
        run: cargo install cargo-cyclonedx
      - name: Generate SBOM
        run: cargo cyclonedx -a --output-cdx
      - name: Upload SBOM
        uses: svenstaro/upload-release-action@v1-release
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: bom.cdx.xml
          asset_name: bom.cdx.xml
          tag: ${{ github.ref_name }}
